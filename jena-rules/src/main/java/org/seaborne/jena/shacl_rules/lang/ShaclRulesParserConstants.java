/* Generated By:JavaCC: Do not edit this line. ShaclRulesParserConstants.java */
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.seaborne.jena.shacl_rules.lang;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ShaclRulesParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int WS = 7;
  /** RegularExpression Id. */
  int WSC = 8;
  /** RegularExpression Id. */
  int BOM = 9;
  /** RegularExpression Id. */
  int IRIref = 10;
  /** RegularExpression Id. */
  int PNAME_NS = 11;
  /** RegularExpression Id. */
  int PNAME_LN = 12;
  /** RegularExpression Id. */
  int BLANK_NODE_LABEL = 13;
  /** RegularExpression Id. */
  int VAR1 = 14;
  /** RegularExpression Id. */
  int VAR2 = 15;
  /** RegularExpression Id. */
  int LANG_DIR = 16;
  /** RegularExpression Id. */
  int A2Z = 17;
  /** RegularExpression Id. */
  int A2ZN = 18;
  /** RegularExpression Id. */
  int KW_A = 19;
  /** RegularExpression Id. */
  int RULE = 20;
  /** RegularExpression Id. */
  int BASE = 21;
  /** RegularExpression Id. */
  int PREFIX = 22;
  /** RegularExpression Id. */
  int VERSION = 23;
  /** RegularExpression Id. */
  int WHERE = 24;
  /** RegularExpression Id. */
  int TRIPLE = 25;
  /** RegularExpression Id. */
  int IS_TRIPLE = 26;
  /** RegularExpression Id. */
  int SUBJECT = 27;
  /** RegularExpression Id. */
  int PREDICATE = 28;
  /** RegularExpression Id. */
  int OBJECT = 29;
  /** RegularExpression Id. */
  int NOT = 30;
  /** RegularExpression Id. */
  int FILTER = 31;
  /** RegularExpression Id. */
  int BOUND = 32;
  /** RegularExpression Id. */
  int COALESCE = 33;
  /** RegularExpression Id. */
  int IN = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int BNODE = 36;
  /** RegularExpression Id. */
  int IRI = 37;
  /** RegularExpression Id. */
  int URI = 38;
  /** RegularExpression Id. */
  int STR = 39;
  /** RegularExpression Id. */
  int STRLANG = 40;
  /** RegularExpression Id. */
  int STRLANGDIR = 41;
  /** RegularExpression Id. */
  int STRDT = 42;
  /** RegularExpression Id. */
  int DTYPE = 43;
  /** RegularExpression Id. */
  int LANG = 44;
  /** RegularExpression Id. */
  int LANGMATCHES = 45;
  /** RegularExpression Id. */
  int LANGDIR = 46;
  /** RegularExpression Id. */
  int IS_URI = 47;
  /** RegularExpression Id. */
  int IS_IRI = 48;
  /** RegularExpression Id. */
  int IS_BLANK = 49;
  /** RegularExpression Id. */
  int IS_LITERAL = 50;
  /** RegularExpression Id. */
  int IS_NUMERIC = 51;
  /** RegularExpression Id. */
  int HAS_LANG = 52;
  /** RegularExpression Id. */
  int HAS_LANGDIR = 53;
  /** RegularExpression Id. */
  int REGEX = 54;
  /** RegularExpression Id. */
  int SAME_TERM = 55;
  /** RegularExpression Id. */
  int SAME_VALUE = 56;
  /** RegularExpression Id. */
  int RAND = 57;
  /** RegularExpression Id. */
  int ABS = 58;
  /** RegularExpression Id. */
  int CEIL = 59;
  /** RegularExpression Id. */
  int FLOOR = 60;
  /** RegularExpression Id. */
  int ROUND = 61;
  /** RegularExpression Id. */
  int CONCAT = 62;
  /** RegularExpression Id. */
  int SUBSTR = 63;
  /** RegularExpression Id. */
  int STRLEN = 64;
  /** RegularExpression Id. */
  int REPLACE = 65;
  /** RegularExpression Id. */
  int UCASE = 66;
  /** RegularExpression Id. */
  int LCASE = 67;
  /** RegularExpression Id. */
  int ENCODE_FOR_URI = 68;
  /** RegularExpression Id. */
  int CONTAINS = 69;
  /** RegularExpression Id. */
  int STRSTARTS = 70;
  /** RegularExpression Id. */
  int STRENDS = 71;
  /** RegularExpression Id. */
  int STRBEFORE = 72;
  /** RegularExpression Id. */
  int STRAFTER = 73;
  /** RegularExpression Id. */
  int YEAR = 74;
  /** RegularExpression Id. */
  int MONTH = 75;
  /** RegularExpression Id. */
  int DAY = 76;
  /** RegularExpression Id. */
  int HOURS = 77;
  /** RegularExpression Id. */
  int MINUTES = 78;
  /** RegularExpression Id. */
  int SECONDS = 79;
  /** RegularExpression Id. */
  int TIMEZONE = 80;
  /** RegularExpression Id. */
  int TZ = 81;
  /** RegularExpression Id. */
  int NOW = 82;
  /** RegularExpression Id. */
  int UUID = 83;
  /** RegularExpression Id. */
  int STRUUID = 84;
  /** RegularExpression Id. */
  int MD5 = 85;
  /** RegularExpression Id. */
  int SHA1 = 86;
  /** RegularExpression Id. */
  int SHA224 = 87;
  /** RegularExpression Id. */
  int SHA256 = 88;
  /** RegularExpression Id. */
  int SHA384 = 89;
  /** RegularExpression Id. */
  int SHA512 = 90;
  /** RegularExpression Id. */
  int TRUE = 91;
  /** RegularExpression Id. */
  int FALSE = 92;
  /** RegularExpression Id. */
  int DIGITS = 93;
  /** RegularExpression Id. */
  int INTEGER = 94;
  /** RegularExpression Id. */
  int DECIMAL = 95;
  /** RegularExpression Id. */
  int DOUBLE = 96;
  /** RegularExpression Id. */
  int INTEGER_POSITIVE = 97;
  /** RegularExpression Id. */
  int DECIMAL_POSITIVE = 98;
  /** RegularExpression Id. */
  int DOUBLE_POSITIVE = 99;
  /** RegularExpression Id. */
  int INTEGER_NEGATIVE = 100;
  /** RegularExpression Id. */
  int DECIMAL_NEGATIVE = 101;
  /** RegularExpression Id. */
  int DOUBLE_NEGATIVE = 102;
  /** RegularExpression Id. */
  int EXPONENT = 103;
  /** RegularExpression Id. */
  int QUOTE_3D = 104;
  /** RegularExpression Id. */
  int QUOTE_3S = 105;
  /** RegularExpression Id. */
  int ECHAR = 106;
  /** RegularExpression Id. */
  int UCHAR = 107;
  /** RegularExpression Id. */
  int UCHAR4 = 108;
  /** RegularExpression Id. */
  int UCHAR8 = 109;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 110;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 111;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG1 = 112;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG2 = 113;
  /** RegularExpression Id. */
  int LPAREN = 114;
  /** RegularExpression Id. */
  int RPAREN = 115;
  /** RegularExpression Id. */
  int NIL = 116;
  /** RegularExpression Id. */
  int LBRACE = 117;
  /** RegularExpression Id. */
  int RBRACE = 118;
  /** RegularExpression Id. */
  int LBRACKET = 119;
  /** RegularExpression Id. */
  int RBRACKET = 120;
  /** RegularExpression Id. */
  int ANON = 121;
  /** RegularExpression Id. */
  int SEMICOLON = 122;
  /** RegularExpression Id. */
  int COMMA = 123;
  /** RegularExpression Id. */
  int DOT = 124;
  /** RegularExpression Id. */
  int EQ = 125;
  /** RegularExpression Id. */
  int NE = 126;
  /** RegularExpression Id. */
  int GT = 127;
  /** RegularExpression Id. */
  int LT = 128;
  /** RegularExpression Id. */
  int LE = 129;
  /** RegularExpression Id. */
  int GE = 130;
  /** RegularExpression Id. */
  int L_TRIPLE = 131;
  /** RegularExpression Id. */
  int R_TRIPLE = 132;
  /** RegularExpression Id. */
  int LT2 = 133;
  /** RegularExpression Id. */
  int GT2 = 134;
  /** RegularExpression Id. */
  int L_ANN = 135;
  /** RegularExpression Id. */
  int R_ANN = 136;
  /** RegularExpression Id. */
  int TILDE = 137;
  /** RegularExpression Id. */
  int BANG = 138;
  /** RegularExpression Id. */
  int COLON = 139;
  /** RegularExpression Id. */
  int SC_OR = 140;
  /** RegularExpression Id. */
  int SC_AND = 141;
  /** RegularExpression Id. */
  int PLUS = 142;
  /** RegularExpression Id. */
  int MINUS = 143;
  /** RegularExpression Id. */
  int STAR = 144;
  /** RegularExpression Id. */
  int SLASH = 145;
  /** RegularExpression Id. */
  int DATATYPE = 146;
  /** RegularExpression Id. */
  int AT = 147;
  /** RegularExpression Id. */
  int VBAR = 148;
  /** RegularExpression Id. */
  int CARAT = 149;
  /** RegularExpression Id. */
  int FPATH = 150;
  /** RegularExpression Id. */
  int RPATH = 151;
  /** RegularExpression Id. */
  int QMARK = 152;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 153;
  /** RegularExpression Id. */
  int PN_CHARS_U = 154;
  /** RegularExpression Id. */
  int PN_CHARS = 155;
  /** RegularExpression Id. */
  int PN_PREFIX = 156;
  /** RegularExpression Id. */
  int PN_LOCAL = 157;
  /** RegularExpression Id. */
  int VARNAME = 158;
  /** RegularExpression Id. */
  int PN_LOCAL_ESC = 159;
  /** RegularExpression Id. */
  int PLX = 160;
  /** RegularExpression Id. */
  int HEX = 161;
  /** RegularExpression Id. */
  int PERCENT = 162;
  /** RegularExpression Id. */
  int UNKNOWN = 163;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<WS>",
    "<WSC>",
    "\"\\ufeff\"",
    "<IRIref>",
    "<PNAME_NS>",
    "<PNAME_LN>",
    "<BLANK_NODE_LABEL>",
    "<VAR1>",
    "<VAR2>",
    "<LANG_DIR>",
    "<A2Z>",
    "<A2ZN>",
    "\"a\"",
    "\"rule\"",
    "\"base\"",
    "\"prefix\"",
    "\"version\"",
    "\"where\"",
    "\"TRIPLE\"",
    "\"isTRIPLE\"",
    "\"SUBJECT\"",
    "\"PREDICATE\"",
    "\"OBJECT\"",
    "\"not\"",
    "\"filter\"",
    "\"bound\"",
    "\"coalesce\"",
    "\"in\"",
    "\"if\"",
    "\"bnode\"",
    "\"iri\"",
    "\"uri\"",
    "\"str\"",
    "\"strlang\"",
    "\"strlangdir\"",
    "\"strdt\"",
    "\"datatype\"",
    "\"lang\"",
    "\"langmatches\"",
    "\"langdir\"",
    "\"isURI\"",
    "\"isIRI\"",
    "\"isBlank\"",
    "\"isLiteral\"",
    "\"isNumeric\"",
    "\"hasLang\"",
    "\"hasLangDir\"",
    "\"regex\"",
    "\"sameTerm\"",
    "\"sameValue\"",
    "\"RAND\"",
    "\"ABS\"",
    "\"CEIL\"",
    "\"FLOOR\"",
    "\"ROUND\"",
    "\"CONCAT\"",
    "\"SUBSTR\"",
    "\"STRLEN\"",
    "\"REPLACE\"",
    "\"UCASE\"",
    "\"LCASE\"",
    "\"ENCODE_FOR_URI\"",
    "\"CONTAINS\"",
    "\"STRSTARTS\"",
    "\"STRENDS\"",
    "\"STRBEFORE\"",
    "\"STRAFTER\"",
    "\"YEAR\"",
    "\"MONTH\"",
    "\"DAY\"",
    "\"HOURS\"",
    "\"MINUTES\"",
    "\"SECONDS\"",
    "\"TIMEZONE\"",
    "\"TZ\"",
    "\"NOW\"",
    "\"UUID\"",
    "\"STRUUID\"",
    "\"MD5\"",
    "\"SHA1\"",
    "\"SHA224\"",
    "\"SHA256\"",
    "\"SHA384\"",
    "\"SHA512\"",
    "\"true\"",
    "\"false\"",
    "<DIGITS>",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<INTEGER_POSITIVE>",
    "<DECIMAL_POSITIVE>",
    "<DOUBLE_POSITIVE>",
    "<INTEGER_NEGATIVE>",
    "<DECIMAL_NEGATIVE>",
    "<DOUBLE_NEGATIVE>",
    "<EXPONENT>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<ECHAR>",
    "<UCHAR>",
    "<UCHAR4>",
    "<UCHAR8>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "\"(\"",
    "\")\"",
    "<NIL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<ANON>",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"<<(\"",
    "\")>>\"",
    "\"<<\"",
    "\">>\"",
    "\"{|\"",
    "\"|}\"",
    "\"~\"",
    "\"!\"",
    "\":\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^^\"",
    "\"@\"",
    "\"|\"",
    "\"^\"",
    "\"->\"",
    "\"<-\"",
    "\"?\"",
    "<PN_CHARS_BASE>",
    "<PN_CHARS_U>",
    "<PN_CHARS>",
    "<PN_PREFIX>",
    "<PN_LOCAL>",
    "<VARNAME>",
    "<PN_LOCAL_ESC>",
    "<PLX>",
    "<HEX>",
    "<PERCENT>",
    "<UNKNOWN>",
  };

}
